import data from './data.json' assert { type: 'json' };
// const data = require('./data.json');

function excelToData() {
  const fieldNames = {
    start_row: 'Opn. No.',
    'Opn. No.': 'process_no',
    'Opn Description': 'process_name',
    Device: 'machine',
    Product: 'char_product',
    Process: 'char_process',
    Class: 'special_character',
    'Product Specification': 'control_product',
    'Process Specifications': 'control_product',
    Evaluation: 'methods_measure',
    'Sample Size': 'methods_size',
    "Freq'cy": 'methods_by',
    "Resp'ty": 'responsibility',
    Record: 'recording',
    'Control Method': 'methods_process',
    'Reactions if out of control conditions are encountered': 'reaction_plan',
  };
  let startrow = null;
  let endrow = null;

  const heading = {
    // ---B: 'process_no'----,
    //edge ONLY FOR ARC
    S: 'methods_size_2',
  };

  const switchCases = {
    //   something: (cellNum) => (heading[cellNum] = fieldNames[key]),
  };

  const addSwitchCase = (_case, fn) => {
    switchCases[_case] = switchCases[_case] || (() => {});
    switchCases[_case] = fn;
  };
  const dynamicSwitch = (value, cellNum) =>
    switchCases[value] && switchCases[value](cellNum);

  Object.keys(fieldNames).forEach((key) =>
    addSwitchCase(key, (cellNum) => (heading[cellNum] = fieldNames[key]))
  );

  for (let cell in data) {
    const cellAsString = cell.toString();
    let onlyString = cell.replace(/[0-9]/g, '');

    data[cellAsString].v === fieldNames.start_row &&
      (startrow = `${onlyString}${+cellAsString.replace(/[a-zA-Z]/g, '') + 1}`);

    const Data =
      typeof data[cellAsString]?.v === 'string'
        ? data[cellAsString]?.v.trim()
        : data[cellAsString]?.w;
    dynamicSwitch(Data, onlyString);

    if (cellAsString !== '!margins' && cellAsString !== '!merges') {
      endrow = cellAsString;
    }
  }

  endrow = `${startrow.replace(/[0-9]/g, '')}${
    +endrow.replace(/[a-zA-Z]/g, '') - 5
  }`;

  function jsonToArray(obj) {
    let oncefalse = false;
    let y = [];
    let beforeEndRow = null;
    for (let cell in obj) {
      if (cell === startrow || oncefalse) {
        if (cell === endrow) break;
        y.push({ [cell]: obj[cell] });
        oncefalse = true;
        beforeEndRow = cell;
      }
    }
    endrow = beforeEndRow;
    return y;
  }
  const dataArr = jsonToArray(data);

  const modifyandAddSkippingValues_spec = (prevMemory, specsObj) => {
    for (let [key, value] of Object.entries(prevMemory)) {
      if (!specsObj[key]) {
        specsObj[key] = value;
      }
    }
  };

  function making(dataArr) {
    let newPart = {};
    let process = [];
    let processObj = {};
    let specs = [];
    let specsObj = {};
    let processCounter = 1;
    let specsCounter = 1;

    let startingLine = 9;
    let currentLine = startingLine;
    let prevMemory = {};

    const createNewProcess = () => {
      processObj.specs = specs;
      processObj.failures = [];
      specs = [];
      process.push(processObj);
      processObj = {};
      processObj.add_to_pir = true;
      processObj.order_no = processCounter;
      processCounter += 1;
      specsCounter = 1;
      prevMemory = {};
    };
    const createNewSpecs = () => {
      startingLine = currentLine;
      specsObj.s_no = specsCounter;

      modifyandAddSkippingValues_spec(prevMemory, specsObj);

      //edge case only for ARC-----
      specsObj['methods_size'] =
        specsObj['methods_size'] && specsObj['methods_size_2']
          ? `${specsObj['methods_size']} | ${specsObj['methods_size_2']}`
          : specsObj['methods_size'] || specsObj['methods_size_2'];
      // -------X-------

      specs.push(specsObj);
      specsObj = {};
      specsCounter += 1;
    };

    for (let [key, value] of dataArr.entries()) {
      let cell = Object.keys(value)[0];
      currentLine = cell.replace(/[a-zA-Z]/g, '');
      let cellString = cell.replace(/[0-9]/g, '');
      let cellValue = Object.entries(value)[0];

      //   console.log(cellValue[1].v);

      if (cellString === 'A' && currentLine > startingLine) {
        createNewSpecs();
        createNewProcess();
      } else {
        if (cellString === 'A' && currentLine > startingLine) {
          createNewProcess();
        }

        if (currentLine > startingLine) {
          createNewSpecs();
        }
      }

      if (heading[cellString]) {
        specsObj[`${heading[cellString]}`] =
          typeof cellValue[1].v === 'string'
            ? cellValue[1].v.trim()
            : cellValue[1].w;

        if (/--/.test(specsObj[`${heading[cellString]}`])) {
          specsObj[`${heading[cellString]}`] = '';
        }

        if (!heading[cellString]) {
          console.log(cellValue[1].v);
        }
        prevMemory[`${heading[cellString]}`] =
          specsObj[`${heading[cellString]}`];
      }

      //   if (!heading[cellString]) {
      //     console.log(cellValue[1].v);
      //   }

      if (cell === endrow) {
        //   console.log(specsObj);
        createNewSpecs();
        processObj.specs = specs;
        processObj.failures = [];
        specs = [];
        process.push(processObj);
        processObj = {};
        console.log(prevMemory);
        break;
      }
      newPart.processes = process;
      // console.log(specs);
    }
    console.log(newPart);
  }
  making(dataArr);
  console.log(heading);
  console.log(endrow);
}
excelToData();
